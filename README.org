* Introduction
[[https://arxiv.org/abs/2506.10605][Arxiv paper]]

This repo contains the code for LatentCSI. We replace the encoder
component of the stable diffusion image to image pipeline with our own
model that takes CSI as input. This model can be small and trained
fast while enabling higher output resolution and text-guidance. =src=
contains reproduction code for the supervised training demonstrated in
the paper.

The use of latent vectors offers a natural way to scale the method to
a distributed setup with possibly multiple CSI sensors, minimizing
data transmitted and thus maximizing throughput. =demo= contains this
work in progress online training demo. We'll present this demo at
Mobicom 2025!

* Usage flow
1. Gather data into =dir=. This is:
   - =photos.npy= or =photos.pt=
   - =csi.npy=
   - any auxiliary data
2. Resize photos if necessary with =src.other.resize_all=
3. Generate latent targets with =src.targets.latent_targets=, run
   using torchrun
   - This creates a folder =dir/targets=
4. Train models using =src.encoder.baseline= and
   =src.encoder.training_cnn_att=.
5. Given a ckpt file, generate predictions and reals using
   =src.inference.viz_test_split=
6. Compute stats with =src.inference.stats=
7. Generate figures with files under =src.figures=

All scripts take a =-p/--path= parameter which always refers to the
top level =dir=.

* Preformatted data (MM-Fi)
Feel free to use the preformatted MM-Fi subset we used from [[https://www.dropbox.com/scl/fo/im4hj37wru3cd2vf7ai4n/ALAsfhv8F8v7Ei39TjxRhhI?rlkey=cwn8bgzcebb2q6k47dzbby6bh&st=nvlgv0xt&dl=0][here]]. The
reference photos are quite large so they're not included. If you want
to work on a different subset of MM-fi, you can obtain a copy and then
use my tool in =src.targets.mmfi_format= which will generate photo/csi
pairs for you.

* Demo (WIP)
Contains some WIP code for a real-time demo.
- =demo/latentcsi-sensor-rs=: Rust CSI sensor code to collect paired
  csi/image data sample, encode to latent, and send to a training
  server
- =demo/server=: Online model training server
- =demo/client=: Frontend image streaming client

* Data locations
CSI data (x): csi.npy
Latent targets (y): targets/targets_latents.pt
Photos: photos.pt
